load_file <- function(name, path) {
ext <- tools::file_ext(name)
switch(ext,
csv = vroom::vroom(path, delim = ",", col_types = list()),
tsv = vroom::vroom(path, delim = "\t", col_types = list()),
validate("Invalid file; Please upload a .csv or .tsv file")
)
}
# run all of the tests for the current file
devtools::test_active_file()
library(shiny)
library(testthat) # >= 3.0.0
library(shinytest)
test_that("as.vector() strips names", {
x <- c(a = 1, b = 2)
expect_equal(as.vector(x), c(1, 2))
})
complicated_object <- list(
x = list(mtcars, iris),
y = 10
)
expect_equal(complicated_object$y, 10)
complicated_object
complicated_object$y
expect_equal(complicated_object$y, 10)
expect_equal(complicated_object$y, 11)
expect_error(f(),  "Calculation failed")
f <- function() {
stop("Calculation failed [location 1]")
}
expect_error(f(),  "Calculation failed")
stop("Calculation failed [location 1]")
?expect_error
sliderInput01 <- function(id) {
sliderInput(id, label = id, min = 0, max = 1, value = 0.5, step = 0.1)
}
cat(as.character(sliderInput01("x")))
sliderInput01("x")
test_that("sliderInput01() creates expected HTML", {
expect_equal(as.character(sliderInput01("x")), "<div class=\"form-group shiny-input-container\">\n  <label class=\"control-label\" id=\"x-label\" for=\"x\">x</label>\n  <input class=\"js-range-slider\" id=\"x\" data-skin=\"shiny\" data-min=\"0\" data-max=\"1\" data-from=\"0.5\" data-step=\"0.1\" data-grid=\"true\" data-grid-num=\"10\" data-grid-snap=\"false\" data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" data-data-type=\"number\"/>\n</div>")
})
test_that("sliderInput01() creates expected HTML", {
expect_snapshot(sliderInput01("x"))
})
devtools::test()
devtools::test_active_file()
usethis::use_test()
test_that("sliderInput01() creates expected HTML", {
expect_snapshot(sliderInput01("x"))
})
library(shiny)
library(testthat) # >= 3.0.0
library(shinytest)
test_that("sliderInput01() creates expected HTML", {
expect_snapshot(sliderInput01("x"))
})
test_that("sliderInput01() creates expected HTML", {
expect_snapshot(sliderInput01("x"))
})
test_that("sliderInput01() creates expected HTML", {
expect_snapshot(sliderInput01("x"))
})
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
